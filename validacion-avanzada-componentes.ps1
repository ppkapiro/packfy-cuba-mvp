# Validador Avanzado de Componentes - Testing Detallado
# An√°lisis profundo de cada componente implementado

Write-Host "=== üîç VALIDACI√ìN AVANZADA DE COMPONENTES ===" -ForegroundColor Cyan

# Funci√≥n para analizar archivo TypeScript
function Analyze-TSXComponent {
    param(
        [string]$FilePath,
        [string]$ComponentName
    )

    Write-Host "`n=== üìÑ ANALIZANDO $ComponentName ===" -ForegroundColor Green

    if (-not (Test-Path $FilePath)) {
        Write-Host "‚ùå Archivo no encontrado: $FilePath" -ForegroundColor Red
        return
    }

    $content = Get-Content $FilePath -Raw

    # An√°lisis de imports
    Write-Host "`nüì¶ IMPORTS:" -ForegroundColor Yellow
    $imports = $content | Select-String "import.*from" -AllMatches
    foreach ($import in $imports.Matches) {
        Write-Host "  ‚úì $($import.Value)" -ForegroundColor Gray
    }

    # An√°lisis de interfaces
    Write-Host "`nüèóÔ∏è  INTERFACES:" -ForegroundColor Yellow
    $interfaces = $content | Select-String "interface\s+\w+.*\{" -AllMatches
    foreach ($interface in $interfaces.Matches) {
        Write-Host "  ‚úì $($interface.Value)" -ForegroundColor Gray
    }

    # An√°lisis de hooks utilizados
    Write-Host "`nü™ù HOOKS UTILIZADOS:" -ForegroundColor Yellow
    $hooks = @("useState", "useEffect", "useAuth", "useTenant", "useContext")
    foreach ($hook in $hooks) {
        if ($content -match $hook) {
            Write-Host "  ‚úì $hook" -ForegroundColor Green
        }
    }

    # An√°lisis de elementos UI
    Write-Host "`nüé® ELEMENTOS UI:" -ForegroundColor Yellow
    $uiElements = @("button", "input", "form", "div", "span", "table", "modal")
    $foundElements = 0
    foreach ($element in $uiElements) {
        if ($content -match "<$element") {
            Write-Host "  ‚úì $element" -ForegroundColor Green
            $foundElements++
        }
    }
    Write-Host "  Total elementos UI: $foundElements" -ForegroundColor Cyan

    # An√°lisis de manejo de estados
    Write-Host "`nüîÑ MANEJO DE ESTADOS:" -ForegroundColor Yellow
    if ($content -match "setLoading|isLoading") {
        Write-Host "  ‚úì Estados de carga" -ForegroundColor Green
    }
    if ($content -match "setError|error") {
        Write-Host "  ‚úì Manejo de errores" -ForegroundColor Green
    }
    if ($content -match "setSuccess|success") {
        Write-Host "  ‚úì Estados de √©xito" -ForegroundColor Green
    }

    # An√°lisis de API calls
    Write-Host "`nüåê LLAMADAS API:" -ForegroundColor Yellow
    if ($content -match "api\.(get|post|put|delete)") {
        Write-Host "  ‚úì Integraci√≥n con API" -ForegroundColor Green
    }
    if ($content -match "fetch|axios") {
        Write-Host "  ‚úì HTTP requests" -ForegroundColor Green
    }

    # An√°lisis de validaci√≥n
    Write-Host "`n‚úÖ VALIDACI√ìN:" -ForegroundColor Yellow
    if ($content -match "required|validate") {
        Write-Host "  ‚úì Validaci√≥n de campos" -ForegroundColor Green
    }
    if ($content -match "trim\(\)|length") {
        Write-Host "  ‚úì Validaci√≥n de formato" -ForegroundColor Green
    }

    # Contar l√≠neas
    $lines = ($content -split "`n").Count
    Write-Host "`nüìä M√âTRICAS:"
    Write-Host "  L√≠neas de c√≥digo: $lines" -ForegroundColor Cyan

    # An√°lisis de complejidad
    $functions = $content | Select-String "const\s+\w+\s*=" -AllMatches
    Write-Host "  Funciones/variables: $($functions.Matches.Count)" -ForegroundColor Cyan
}

# Analizar cada componente
$components = @(
    @{
        Name     = "EnvioFormContainer"
        Path     = "frontend\src\components\EnvioFormContainer.tsx"
        Expected = @("Router", "Autenticaci√≥n", "Roles")
    },
    @{
        Name     = "RemitenteForm"
        Path     = "frontend\src\components\envios\RemitenteForm.tsx"
        Expected = @("Formulario", "Validaci√≥n", "API")
    },
    @{
        Name     = "OperadorForm"
        Path     = "frontend\src\components\envios\OperadorForm.tsx"
        Expected = @("Dashboard", "Lista", "B√∫squeda")
    },
    @{
        Name     = "AdminForm"
        Path     = "frontend\src\components\envios\AdminForm.tsx"
        Expected = @("Estad√≠sticas", "Gesti√≥n")
    },
    @{
        Name     = "DestinatarioView"
        Path     = "frontend\src\components\envios\DestinatarioView.tsx"
        Expected = @("Vista", "Detalles")
    }
)

foreach ($component in $components) {
    Analyze-TSXComponent -FilePath $component.Path -ComponentName $component.Name
}

Write-Host "`n=== üìã CHECKLIST DE TESTING MANUAL ===" -ForegroundColor Magenta

Write-Host "`nüîê AUTENTICACI√ìN Y NAVEGACI√ìN:" -ForegroundColor Yellow
Write-Host "‚ñ° Login funciona correctamente"
Write-Host "‚ñ° Redirecci√≥n seg√∫n rol es correcta"
Write-Host "‚ñ° Logout funciona y limpia sesi√≥n"
Write-Host "‚ñ° Manejo de sesiones expiradas"

Write-Host "`nüë§ REMITENTE FORM:" -ForegroundColor Yellow
Write-Host "‚ñ° Formulario se carga correctamente"
Write-Host "‚ñ° Validaci√≥n de campos obligatorios"
Write-Host "‚ñ° Env√≠o de datos funciona"
Write-Host "‚ñ° Mensaje de confirmaci√≥n aparece"
Write-Host "‚ñ° Formulario se resetea tras env√≠o"

Write-Host "`nüë• OPERADOR FORM:" -ForegroundColor Yellow
Write-Host "‚ñ° Dashboard carga con pesta√±as"
Write-Host "‚ñ° Lista de env√≠os se muestra"
Write-Host "‚ñ° B√∫squeda funciona correctamente"
Write-Host "‚ñ° Filtros operan bien"
Write-Host "‚ñ° Creaci√≥n de env√≠o desde pesta√±a"

Write-Host "`nüëë ADMIN FORM:" -ForegroundColor Yellow
Write-Host "‚ñ° Estad√≠sticas se calculan y muestran"
Write-Host "‚ñ° Navegaci√≥n entre pesta√±as fluida"
Write-Host "‚ñ° Acceso a gesti√≥n de env√≠os"
Write-Host "‚ñ° Enlaces a admin Django funcionan"
Write-Host "‚ñ° Actualizaci√≥n de datos opera"

Write-Host "`nüì® DESTINATARIO VIEW:" -ForegroundColor Yellow
Write-Host "‚ñ° Lista de env√≠os se filtra correctamente"
Write-Host "‚ñ° Vista detalle funciona"
Write-Host "‚ñ° B√∫squeda opera en tiempo real"
Write-Host "‚ñ° Informaci√≥n completa se muestra"
Write-Host "‚ñ° Navegaci√≥n entre vistas fluida"

Write-Host "`nüì± RESPONSIVE TESTING:" -ForegroundColor Yellow
Write-Host "‚ñ° M√≥vil: Layouts se adaptan bien"
Write-Host "‚ñ° Tablet: Navegaci√≥n es c√≥moda"
Write-Host "‚ñ° Desktop: Aprovecha espacio disponible"
Write-Host "‚ñ° Formularios usables en todos los tama√±os"

Write-Host "`nüö´ TESTING DE ERRORES:" -ForegroundColor Yellow
Write-Host "‚ñ° Sin conexi√≥n: Manejo graceful"
Write-Host "‚ñ° API errors: Mensajes claros"
Write-Host "‚ñ° Campos vac√≠os: Validaci√≥n correcta"
Write-Host "‚ñ° Permisos: Restricciones respetadas"

Write-Host "`n=== üéØ CRITERIOS DE APROBACI√ìN ===" -ForegroundColor Green

Write-Host "`n‚úÖ FUNCIONALIDAD:" -ForegroundColor Cyan
Write-Host "- Cada rol accede a su vista correcta"
Write-Host "- Formularios env√≠an y validan datos"
Write-Host "- Navegaci√≥n es intuitiva y fluida"
Write-Host "- Estados de carga/error/√©xito son claros"

Write-Host "`n‚úÖ RENDIMIENTO:" -ForegroundColor Cyan
Write-Host "- Carga inicial < 3 segundos"
Write-Host "- Navegaci√≥n entre vistas < 1 segundo"
Write-Host "- Sin memory leaks visibles"
Write-Host "- Respuesta de formularios √°gil"

Write-Host "`n‚úÖ UX/UI:" -ForegroundColor Cyan
Write-Host "- Dise√±o consistente en todas las vistas"
Write-Host "- Iconograf√≠a clara y comprensible"
Write-Host "- Feedback visual apropiado"
Write-Host "- Responsive design funcional"

Write-Host "`n‚úÖ INTEGRACI√ìN:" -ForegroundColor Cyan
Write-Host "- Contextos de auth/tenant operan"
Write-Host "- API calls funcionan correctamente"
Write-Host "- Manejo de errores es robusto"
Write-Host "- Datos se persisten apropiadamente"

Write-Host "`nüéâ VALIDACI√ìN AVANZADA COMPLETADA" -ForegroundColor Green
Write-Host "üìã Usar checklist para testing manual sistem√°tico" -ForegroundColor Cyan
