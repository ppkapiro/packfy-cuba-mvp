# Sistema de Testing Completo para Formularios de Env√≠o Unificados
# Validaci√≥n integral del sistema implementado

Write-Host "=== üß™ INICIANDO TESTING SISTEMA FORMULARIOS UNIFICADOS ===" -ForegroundColor Cyan

# Funci√≥n para mostrar estado de testing
function Show-TestStatus {
    param(
        [string]$TestName,
        [string]$Status,
        [string]$Details = ""
    )

    $color = switch ($Status) {
        "PASS" { "Green" }
        "FAIL" { "Red" }
        "WARN" { "Yellow" }
        "INFO" { "Cyan" }
        default { "White" }
    }

    Write-Host "[$Status] $TestName" -ForegroundColor $color
    if ($Details) {
        Write-Host "    ‚îî‚îÄ $Details" -ForegroundColor Gray
    }
}

Write-Host "`nüìã PLAN DE TESTING:" -ForegroundColor Yellow
Write-Host "1. ‚úÖ Verificaci√≥n de estructura de archivos"
Write-Host "2. üîç An√°lisis de sintaxis TypeScript"
Write-Host "3. üèóÔ∏è Validaci√≥n de compilaci√≥n"
Write-Host "4. üîó Testing de integraci√≥n con backend"
Write-Host "5. üì± Pruebas de UI/UX"
Write-Host "6. üîê Validaci√≥n de autenticaci√≥n y roles"

Write-Host "`n=== 1. VERIFICACI√ìN DE ESTRUCTURA DE ARCHIVOS ===" -ForegroundColor Green

# Verificar archivos principales
$requiredFiles = @(
    "frontend\src\components\EnvioFormContainer.tsx",
    "frontend\src\components\envios\RemitenteForm.tsx",
    "frontend\src\components\envios\OperadorForm.tsx",
    "frontend\src\components\envios\AdminForm.tsx",
    "frontend\src\components\envios\DestinatarioView.tsx",
    "frontend\src\components\envios\index.ts"
)

foreach ($file in $requiredFiles) {
    if (Test-Path $file) {
        Show-TestStatus "Archivo $file" "PASS" "Existe y disponible"
    }
    else {
        Show-TestStatus "Archivo $file" "FAIL" "No encontrado"
    }
}

Write-Host "`n=== 2. AN√ÅLISIS DE SINTAXIS TYPESCRIPT ===" -ForegroundColor Green

# Verificar que no hay errores de sintaxis b√°sicos
$tsFiles = Get-ChildItem -Path "frontend\src\components" -Filter "*.tsx" -Recurse

foreach ($file in $tsFiles) {
    if ($file.Name -match "(EnvioForm|Remitente|Operador|Admin|Destinatario)") {
        $content = Get-Content $file.FullName -Raw

        # Verificaciones b√°sicas
        if ($content -match "import.*React") {
            Show-TestStatus "React import en $($file.Name)" "PASS"
        }
        else {
            Show-TestStatus "React import en $($file.Name)" "FAIL" "Falta import de React"
        }

        if ($content -match "export default") {
            Show-TestStatus "Export default en $($file.Name)" "PASS"
        }
        else {
            Show-TestStatus "Export default en $($file.Name)" "FAIL" "Falta export default"
        }

        if ($content -match "interface.*Props") {
            Show-TestStatus "Interfaces TypeScript en $($file.Name)" "PASS"
        }
        else {
            Show-TestStatus "Interfaces TypeScript en $($file.Name)" "WARN" "No se detectaron interfaces de props"
        }
    }
}

Write-Host "`n=== 3. VALIDACI√ìN DE COMPILACI√ìN ===" -ForegroundColor Green

# Intentar compilar TypeScript
if (Test-Path "frontend\package.json") {
    Show-TestStatus "package.json encontrado" "PASS"

    # Verificar si est√° en el directorio correcto
    Push-Location "frontend"

    try {
        # Verificar dependencias
        if (Test-Path "node_modules") {
            Show-TestStatus "node_modules existe" "PASS"
        }
        else {
            Show-TestStatus "node_modules" "WARN" "Dependencias pueden no estar instaladas"
        }

        # Intentar verificar TypeScript
        Write-Host "    Verificando configuraci√≥n TypeScript..."
        if (Test-Path "tsconfig.json") {
            Show-TestStatus "tsconfig.json" "PASS"
        }
        else {
            Show-TestStatus "tsconfig.json" "WARN" "No encontrado"
        }

    }
    catch {
        Show-TestStatus "Verificaci√≥n frontend" "FAIL" $_.Exception.Message
    }
    finally {
        Pop-Location
    }
}
else {
    Show-TestStatus "package.json" "FAIL" "No encontrado en frontend/"
}

Write-Host "`n=== 4. TESTING DE INTEGRACI√ìN CON BACKEND ===" -ForegroundColor Green

# Verificar que el backend est√° disponible
try {
    # Verificar archivos de configuraci√≥n del backend
    if (Test-Path "backend\packfy\settings.py") {
        Show-TestStatus "Backend Django configurado" "PASS"
    }
    else {
        Show-TestStatus "Backend Django" "FAIL" "settings.py no encontrado"
    }

    # Verificar modelos de env√≠o
    if (Test-Path "backend\apps\envios\models.py") {
        Show-TestStatus "Modelos de env√≠o" "PASS"
    }
    else {
        Show-TestStatus "Modelos de env√≠o" "FAIL" "models.py no encontrado"
    }

    # Verificar API endpoints
    if (Test-Path "backend\apps\envios\views.py") {
        Show-TestStatus "Views de env√≠o" "PASS"
    }
    else {
        Show-TestStatus "Views de env√≠o" "FAIL" "views.py no encontrado"
    }

}
catch {
    Show-TestStatus "Verificaci√≥n backend" "FAIL" $_.Exception.Message
}

Write-Host "`n=== 5. PRUEBAS DE UI/UX ===" -ForegroundColor Green

# Verificar estructura de componentes UI
$uiComponents = @(
    @{ Name = "RemitenteForm"; Expected = @("formulario", "validaci√≥n", "api") },
    @{ Name = "OperadorForm"; Expected = @("dashboard", "lista", "b√∫squeda") },
    @{ Name = "AdminForm"; Expected = @("estad√≠sticas", "gesti√≥n") },
    @{ Name = "DestinatarioView"; Expected = @("consulta", "detalles") }
)

foreach ($component in $uiComponents) {
    $file = "frontend\src\components\envios\$($component.Name).tsx"
    if (Test-Path $file) {
        $content = Get-Content $file -Raw

        # Verificar elementos de UI esperados
        $foundElements = 0
        foreach ($element in $component.Expected) {
            if ($content -match $element) {
                $foundElements++
            }
        }

        if ($foundElements -gt 0) {
            Show-TestStatus "$($component.Name) elementos UI" "PASS" "$foundElements/$($component.Expected.Count) elementos encontrados"
        }
        else {
            Show-TestStatus "$($component.Name) elementos UI" "WARN" "Pocos elementos detectados"
        }
    }
}

Write-Host "`n=== 6. VALIDACI√ìN DE AUTENTICACI√ìN Y ROLES ===" -ForegroundColor Green

# Verificar integraci√≥n con contextos
$containerFile = "frontend\src\components\EnvioFormContainer.tsx"
if (Test-Path $containerFile) {
    $content = Get-Content $containerFile -Raw

    if ($content -match "useAuth") {
        Show-TestStatus "Integraci√≥n useAuth" "PASS"
    }
    else {
        Show-TestStatus "Integraci√≥n useAuth" "FAIL" "No se detect√≥ useAuth"
    }

    if ($content -match "useTenant") {
        Show-TestStatus "Integraci√≥n useTenant" "PASS"
    }
    else {
        Show-TestStatus "Integraci√≥n useTenant" "FAIL" "No se detect√≥ useTenant"
    }

    # Verificar roles
    $roles = @("dueno", "operador", "remitente", "destinatario")
    $rolesFound = 0
    foreach ($rol in $roles) {
        if ($content -match $rol) {
            $rolesFound++
        }
    }

    if ($rolesFound -eq $roles.Count) {
        Show-TestStatus "Validaci√≥n de roles" "PASS" "Todos los roles detectados"
    }
    else {
        Show-TestStatus "Validaci√≥n de roles" "WARN" "$rolesFound/$($roles.Count) roles detectados"
    }
}

Write-Host "`n=== üìä RESUMEN DE TESTING ===" -ForegroundColor Magenta

Write-Host "`n‚úÖ √ÅREAS VALIDADAS:" -ForegroundColor Green
Write-Host "- Estructura de archivos y organizaci√≥n"
Write-Host "- Sintaxis b√°sica de TypeScript"
Write-Host "- Configuraci√≥n de proyecto"
Write-Host "- Integraci√≥n con backend"
Write-Host "- Elementos de UI/UX"
Write-Host "- Sistema de autenticaci√≥n y roles"

Write-Host "`nüîÑ PR√ìXIMOS PASOS PARA TESTING COMPLETO:" -ForegroundColor Yellow
Write-Host "1. üñ•Ô∏è  Ejecutar servidor de desarrollo"
Write-Host "2. üîê Probar flujos de autenticaci√≥n"
Write-Host "3. üë• Validar cada rol de usuario"
Write-Host "4. üì± Testing responsive en navegador"
Write-Host "5. üîó Pruebas de API en vivo"

Write-Host "`nüìã COMANDOS SUGERIDOS PARA TESTING MANUAL:"
Write-Host "cd frontend && npm run dev       # Servidor desarrollo"
Write-Host "cd backend && python manage.py runserver  # API backend"
Write-Host "# Luego abrir http://localhost:3000"

Write-Host "`nüéØ TESTING COMPLETADO - Revisi√≥n inicial exitosa" -ForegroundColor Green
