# INSTRUCCIONES PARA SUBIR PROYECTO A GITHUB
Write-Host "SUBIENDO PROYECTO PACKFY A GITHUB" -ForegroundColor Green
Write-Host "==================================" -ForegroundColor Green

Write-Host "`n1. VERIFICAR GIT INSTALADO:" -ForegroundColor Yellow
try {
    $gitVersion = git --version
    Write-Host "‚úÖ Git instalado: $gitVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Git no instalado - Descargar de: https://git-scm.com/" -ForegroundColor Red
    exit 1
}

Write-Host "`n2. INICIALIZAR REPOSITORIO LOCAL:" -ForegroundColor Yellow
if (!(Test-Path ".git")) {
    Write-Host "Inicializando repositorio git..." -ForegroundColor Cyan
    git init
    Write-Host "‚úÖ Repositorio inicializado" -ForegroundColor Green
} else {
    Write-Host "‚úÖ Repositorio git ya existe" -ForegroundColor Green
}

Write-Host "`n3. CREAR .gitignore:" -ForegroundColor Yellow
if (!(Test-Path ".gitignore")) {
    Write-Host "Creando .gitignore..." -ForegroundColor Cyan
    @"
# Dependencies
node_modules/
__pycache__/
*.pyc
*.pyo
*.pyd
.Python
env/
pip-log.txt
pip-delete-this-directory.txt
.tox
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.log
.git
.mypy_cache
.pytest_cache
.hypothesis

# OS Files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# IDEs
.vscode/
.idea/
*.swp
*.swo
*~

# Environment variables
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Build outputs
dist/
build/
*.egg-info/

# Docker
*.log

# Database
*.db
*.sqlite3

# Media files (uploads)
media/

# Static files (will be collected)
staticfiles/

# Backup files
*.bak
*.backup

# Temporary files
*.tmp
*.temp

# Ngrok
ngrok/
ngrok.zip
node.zip
node-v*/
"@ | Out-File -FilePath ".gitignore" -Encoding utf8
    Write-Host "‚úÖ .gitignore creado" -ForegroundColor Green
} else {
    Write-Host "‚úÖ .gitignore ya existe" -ForegroundColor Green
}

Write-Host "`n4. CREAR README.md ACTUALIZADO:" -ForegroundColor Yellow
@"
# üì¶ Packfy - Sistema de Paqueter√≠a para Cuba

## üöÄ Descripci√≥n
Sistema completo de gesti√≥n de env√≠os para Cuba con funcionalidad PWA (Progressive Web App) para uso en m√≥viles.

## ‚ú® Caracter√≠sticas
- üè¢ **Multi-tenant**: M√∫ltiples empresas
- üì± **PWA**: Instalable en m√≥viles como app nativa
- üîê **Autenticaci√≥n**: Sistema de usuarios seguro
- üìä **Dashboard**: Panel de control completo
- üöö **Gesti√≥n de env√≠os**: CRUD completo de paquetes
- üìß **Notificaciones**: Sistema de alertas por email
- üê≥ **Docker**: Totalmente containerizado

## üõ†Ô∏è Stack Tecnol√≥gico

### Backend
- **Django** 4.2+ con DRF
- **PostgreSQL** 16
- **Python** 3.11+

### Frontend
- **React** 18+ con TypeScript
- **Vite** para build y desarrollo
- **PWA** con Service Workers
- **Responsive Design**

## üöÄ Instalaci√≥n y Uso

### Prerrequisitos
- Docker y Docker Compose
- Git

### Instalaci√≥n
\`\`\`bash
# Clonar repositorio
git clone https://github.com/TU_USUARIO/packfy-cuba-mvp.git
cd packfy-cuba-mvp

# Iniciar servicios
docker compose up -d

# Crear superusuario
docker exec -i packfy-backend python /app/scripts/create_admin.py
\`\`\`

### URLs
- **Frontend**: http://localhost:5173
- **Backend API**: http://localhost:8000
- **Admin Django**: http://localhost:8000/admin

### Credenciales por defecto
- **Email**: admin@correo.com
- **Password**: admin123

## üì± PWA (Progressive Web App)

### Instalaci√≥n en m√≥vil
1. Abrir en navegador m√≥vil: \`http://TU_IP:5173\`
2. Seguir instrucciones de instalaci√≥n
3. Para desarrollo local, configurar Chrome flags para HTTP

### URLs de prueba
- **Test PWA**: \`http://TU_IP:5173/test-pwa.html\`
- **Verificaci√≥n**: Ejecutar \`.\test-pwa.ps1\`

## üê≥ Docker Services

### Servicios incluidos
- **packfy-frontend**: React + Vite (Puerto 5173)
- **packfy-backend**: Django + DRF (Puerto 8000)  
- **packfy-database**: PostgreSQL 16 (Puerto 5433)

### Comandos √∫tiles
\`\`\`bash
# Ver estado de servicios
docker compose ps

# Ver logs
docker logs packfy-frontend
docker logs packfy-backend

# Reiniciar servicios
docker compose restart

# Parar servicios
docker compose down
\`\`\`

## üîß Scripts de Utilidad

- **\`test-pwa.ps1\`**: Verificaci√≥n completa de PWA
- **\`guia-movil.ps1\`**: Instrucciones para m√≥vil
- **\`instrucciones-finales.ps1\`**: Configuraci√≥n final

## üåê Deployment

### Para producci√≥n
1. Configurar variables de entorno
2. Usar HTTPS (requerido para PWA)
3. Configurar dominio personalizado

## üìù Desarrollo

### Estructura del proyecto
\`\`\`
packfy-cuba-mvp/
‚îú‚îÄ‚îÄ backend/           # Django API
‚îú‚îÄ‚îÄ frontend/          # React PWA
‚îú‚îÄ‚îÄ docs/             # Documentaci√≥n
‚îú‚îÄ‚îÄ compose.yml       # Docker Compose
‚îî‚îÄ‚îÄ *.ps1            # Scripts de utilidad
\`\`\`

## ü§ù Contribuci√≥n
1. Fork el repositorio
2. Crear branch para feature
3. Commit cambios
4. Push y crear Pull Request

## üìÑ Licencia
MIT License

## üìû Soporte
Para soporte t√©cnico, crear un issue en GitHub.

---

‚≠ê **¬°Dale una estrella si te gusta el proyecto!** ‚≠ê
"@ | Out-File -FilePath "README.md" -Encoding utf8

Write-Host "‚úÖ README.md actualizado" -ForegroundColor Green

Write-Host "`n5. AGREGAR ARCHIVOS AL STAGING:" -ForegroundColor Yellow
git add .
Write-Host "‚úÖ Archivos agregados" -ForegroundColor Green

Write-Host "`n6. HACER COMMIT INICIAL:" -ForegroundColor Yellow
git commit -m "üöÄ Initial commit: Packfy Cuba MVP with PWA functionality

‚ú® Features:
- Multi-tenant Django backend with DRF
- React TypeScript frontend with PWA
- Docker containerization
- PostgreSQL database
- Service Workers for offline functionality
- Mobile-responsive design
- Admin panel and user authentication

üõ†Ô∏è Technical Stack:
- Backend: Django 4.2+ + PostgreSQL 16
- Frontend: React 18 + TypeScript + Vite
- Infrastructure: Docker Compose
- PWA: Service Workers + Web App Manifest

üì± PWA Ready:
- Installable on mobile devices
- Offline functionality
- Native app-like experience
- Test page included for verification"

Write-Host "‚úÖ Commit inicial creado" -ForegroundColor Green

Write-Host "`n7. PASOS PARA SUBIR A GITHUB:" -ForegroundColor Yellow
Write-Host "================================" -ForegroundColor Yellow
Write-Host "AHORA NECESITAS:" -ForegroundColor Red
Write-Host "1. Ir a: https://github.com" -ForegroundColor Cyan
Write-Host "2. Crear nuevo repositorio llamado: packfy-cuba-mvp" -ForegroundColor Cyan
Write-Host "3. NO marcar 'Initialize with README' (ya tenemos uno)" -ForegroundColor Cyan
Write-Host "4. Copiar la URL del repositorio (ej: https://github.com/TU_USUARIO/packfy-cuba-mvp.git)" -ForegroundColor Cyan
Write-Host "5. Volver aqui y ejecutar:" -ForegroundColor Cyan
Write-Host "   git remote add origin https://github.com/TU_USUARIO/packfy-cuba-mvp.git" -ForegroundColor White
Write-Host "   git branch -M main" -ForegroundColor White
Write-Host "   git push -u origin main" -ForegroundColor White

Write-Host "`n8. COMANDOS LISTOS PARA COPIAR:" -ForegroundColor Yellow
Write-Host "=================================" -ForegroundColor Yellow
Write-Host "# Reemplaza TU_USUARIO con tu usuario de GitHub:" -ForegroundColor Green
Write-Host "git remote add origin https://github.com/TU_USUARIO/packfy-cuba-mvp.git" -ForegroundColor Cyan
Write-Host "git branch -M main" -ForegroundColor Cyan
Write-Host "git push -u origin main" -ForegroundColor Cyan

Write-Host "`n‚úÖ PREPARACION COMPLETADA!" -ForegroundColor Green
Write-Host "Ahora crea el repositorio en GitHub y ejecuta los comandos finales." -ForegroundColor Yellow
