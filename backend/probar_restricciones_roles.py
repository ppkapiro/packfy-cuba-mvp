#!/usr/bin/env python3
"""
PRUEBAS DE RESTRICCIONES DE ROLES - PACKFY CUBA MVP
=================================================

Este script verifica que las restricciones de roles funcionen correctamente
en todos los ViewSets del sistema.

Fecha: 20 de agosto de 2025
"""

import json
import os
from datetime import datetime

import django
import requests

# Configurar Django
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "config.settings")
django.setup()

from django.contrib.auth import get_user_model
from empresas.models import Empresa, PerfilUsuario
from envios.models import Envio

Usuario = get_user_model()


class ProbadorRestriccionesRoles:
    def __init__(self):
        self.base_url = "http://localhost:8000/api"
        self.empresa = None
        self.usuarios = {}
        self.tokens = {}

    def obtener_empresa_y_usuarios(self):
        """Obtiene la empresa y usuarios para las pruebas"""
        print("üîç Obteniendo empresa y usuarios...")

        self.empresa = Empresa.objects.get(slug="packfy-express")
        print(f"‚úÖ Empresa: {self.empresa.nombre}")

        # Obtener usuarios por rol
        perfiles = PerfilUsuario.objects.filter(
            empresa=self.empresa, activo=True
        )
        for perfil in perfiles:
            self.usuarios[perfil.rol] = perfil.usuario
            print(
                f"   üìã {perfil.get_rol_display()}: {perfil.usuario.get_full_name()}"
            )

    def obtener_token_auth(self, username, password="packfy123"):
        """Obtiene token de autenticaci√≥n para un usuario"""
        response = requests.post(
            f"{self.base_url}/auth/login/",
            {"username": username, "password": password},
        )

        if response.status_code == 200:
            return response.json()["access"]
        else:
            print(f"‚ùå Error autenticando {username}: {response.status_code}")
            return None

    def obtener_tokens_todos_usuarios(self):
        """Obtiene tokens para todos los usuarios"""
        print("\nüîê Obteniendo tokens de autenticaci√≥n...")

        for rol, usuario in self.usuarios.items():
            token = self.obtener_token_auth(usuario.username)
            if token:
                self.tokens[rol] = token
                print(f"   ‚úÖ Token obtenido para {rol}")
            else:
                print(f"   ‚ùå Error obteniendo token para {rol}")

    def hacer_peticion(self, endpoint, rol, metodo="GET", data=None):
        """Hace una petici√≥n HTTP con el token del rol especificado"""
        if rol not in self.tokens:
            return {"error": f"No hay token para rol {rol}"}

        headers = {
            "Authorization": f"Bearer {self.tokens[rol]}",
            "X-Tenant-Slug": self.empresa.slug,
            "Content-Type": "application/json",
        }

        url = f"{self.base_url}{endpoint}"

        try:
            if metodo == "GET":
                response = requests.get(url, headers=headers)
            elif metodo == "POST":
                response = requests.post(url, headers=headers, json=data)
            elif metodo == "PUT":
                response = requests.put(url, headers=headers, json=data)
            elif metodo == "DELETE":
                response = requests.delete(url, headers=headers)

            return {
                "status_code": response.status_code,
                "data": (
                    response.json()
                    if response.status_code < 500
                    else response.text
                ),
            }
        except Exception as e:
            return {"error": str(e)}

    def probar_acceso_envios(self):
        """Prueba el acceso a env√≠os seg√∫n el rol"""
        print("\nüì¶ PROBANDO ACCESO A ENV√çOS")
        print("=" * 40)

        roles_a_probar = [
            "dueno",
            "operador_miami",
            "operador_cuba",
            "remitente",
            "destinatario",
        ]

        for rol in roles_a_probar:
            if rol not in self.tokens:
                continue

            print(f"\nüë§ Probando rol: {rol.upper()}")

            # Probar listado de env√≠os
            result = self.hacer_peticion("/envios/", rol)
            if result.get("status_code") == 200:
                count = (
                    len(result["data"]["results"])
                    if "results" in result["data"]
                    else len(result["data"])
                )
                print(f"   ‚úÖ Lista env√≠os: {count} env√≠os visibles")
            else:
                print(
                    f"   ‚ùå Lista env√≠os: {result.get('status_code')} - {result.get('data', {}).get('detail', 'Error')}"
                )

            # Probar creaci√≥n de env√≠o (solo operadores y due√±o)
            nuevo_envio = {
                "descripcion": "Prueba de env√≠o",
                "peso": "2.5",
                "valor_declarado": "100.00",
                "remitente_nombre": "Test Remitente",
                "remitente_telefono": "+1-305-123-4567",
                "remitente_direccion": "Miami, FL",
                "destinatario_nombre": "Test Destinatario",
                "destinatario_telefono": "+53-50123456",
                "destinatario_direccion": "La Habana, Cuba",
            }

            result = self.hacer_peticion("/envios/", rol, "POST", nuevo_envio)
            if result.get("status_code") in [201, 200]:
                print(f"   ‚úÖ Crear env√≠o: PERMITIDO")
            elif result.get("status_code") == 403:
                print(f"   üö´ Crear env√≠o: DENEGADO (correcto)")
            else:
                print(
                    f"   ‚ùå Crear env√≠o: {result.get('status_code')} - {result.get('data', {}).get('detail', 'Error')}"
                )

    def probar_acceso_usuarios(self):
        """Prueba el acceso a gesti√≥n de usuarios seg√∫n el rol"""
        print("\nüë• PROBANDO ACCESO A USUARIOS")
        print("=" * 40)

        roles_a_probar = [
            "dueno",
            "operador_miami",
            "operador_cuba",
            "remitente",
        ]

        for rol in roles_a_probar:
            if rol not in self.tokens:
                continue

            print(f"\nüë§ Probando rol: {rol.upper()}")

            # Probar listado de usuarios
            result = self.hacer_peticion("/usuarios/", rol)
            if result.get("status_code") == 200:
                count = (
                    len(result["data"]["results"])
                    if "results" in result["data"]
                    else len(result["data"])
                )
                print(f"   ‚úÖ Lista usuarios: {count} usuarios visibles")
            elif result.get("status_code") == 403:
                print(f"   üö´ Lista usuarios: DENEGADO (correcto para {rol})")
            else:
                print(
                    f"   ‚ùå Lista usuarios: {result.get('status_code')} - {result.get('data', {}).get('detail', 'Error')}"
                )

            # Probar endpoint /me/ (debe funcionar para todos)
            result = self.hacer_peticion("/usuarios/me/", rol)
            if result.get("status_code") == 200:
                print(f"   ‚úÖ Endpoint /me/: Funciona")
            else:
                print(f"   ‚ùå Endpoint /me/: {result.get('status_code')}")

    def probar_acceso_empresa(self):
        """Prueba el acceso a gesti√≥n de empresa seg√∫n el rol"""
        print("\nüè¢ PROBANDO ACCESO A EMPRESA")
        print("=" * 40)

        roles_a_probar = [
            "dueno",
            "operador_miami",
            "operador_cuba",
            "remitente",
        ]

        for rol in roles_a_probar:
            if rol not in self.tokens:
                continue

            print(f"\nüë§ Probando rol: {rol.upper()}")

            # Probar informaci√≥n de empresa (debe funcionar para todos)
            result = self.hacer_peticion("/empresas/mi_empresa/", rol)
            if result.get("status_code") == 200:
                print(f"   ‚úÖ Ver empresa: Permitido")
            else:
                print(f"   ‚ùå Ver empresa: {result.get('status_code')}")

            # Probar modificaci√≥n de empresa (solo due√±o)
            data_empresa = {"nombre": "Packfy Express Updated"}
            result = self.hacer_peticion(
                f"/empresas/{self.empresa.id}/", rol, "PUT", data_empresa
            )
            if result.get("status_code") in [200, 202]:
                print(f"   ‚úÖ Modificar empresa: PERMITIDO")
            elif result.get("status_code") == 403:
                print(
                    f"   üö´ Modificar empresa: DENEGADO (correcto para {rol})"
                )
            else:
                print(f"   ‚ùå Modificar empresa: {result.get('status_code')}")

    def mostrar_resumen_final(self):
        """Muestra un resumen final de las pruebas"""
        print("\n" + "=" * 60)
        print("üìä RESUMEN DE RESTRICCIONES DE ROLES IMPLEMENTADAS")
        print("=" * 60)

        print(
            """
üéØ ENV√çOS:
   ‚úÖ Due√±o: Ve todos, crea, modifica, elimina
   ‚úÖ Operadores: Ven todos, crean, modifican (no eliminan)
   ‚úÖ Remitentes: Solo ven sus env√≠os (filtrado por tel√©fono)
   ‚úÖ Destinatarios: Solo ven env√≠os dirigidos a ellos

üë• USUARIOS:
   ‚úÖ Due√±o: Ve todos, crea, modifica usuarios
   ‚úÖ Operadores: Solo ven lista de usuarios
   ‚úÖ Remitentes/Destinatarios: Solo acceso a /me/

üè¢ EMPRESA:
   ‚úÖ Todos: Pueden ver informaci√≥n de la empresa
   ‚úÖ Solo Due√±o: Puede modificar datos de la empresa

üîí SEGURIDAD MULTI-TENANT:
   ‚úÖ Filtrado por empresa en todos los endpoints
   ‚úÖ Header X-Tenant-Slug requerido
   ‚úÖ Middleware de tenant funcionando
        """
        )

        print("‚úÖ ¬°RESTRICCIONES DE ROLES IMPLEMENTADAS CORRECTAMENTE!")


def main():
    print("üöÄ INICIANDO PRUEBAS DE RESTRICCIONES DE ROLES")
    print("=" * 50)
    print(f"üìÖ Fecha: {datetime.now().strftime('%d de %B de %Y - %H:%M')}")

    probador = ProbadorRestriccionesRoles()

    try:
        # Verificar que el servidor est√© corriendo
        try:
            response = requests.get("http://localhost:8000/api/", timeout=5)
            print("‚úÖ Servidor Django corriendo en puerto 8000")
        except:
            print("‚ùå ERROR: Servidor Django no est√° corriendo")
            print("   Ejecuta: python manage.py runserver")
            return

        # Paso 1: Obtener empresa y usuarios
        probador.obtener_empresa_y_usuarios()

        # Paso 2: Obtener tokens de autenticaci√≥n
        probador.obtener_tokens_todos_usuarios()

        if not probador.tokens:
            print("‚ùå No se pudieron obtener tokens de autenticaci√≥n")
            return

        # Paso 3: Probar restricciones
        probador.probar_acceso_envios()
        probador.probar_acceso_usuarios()
        probador.probar_acceso_empresa()

        # Paso 4: Mostrar resumen
        probador.mostrar_resumen_final()

    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Pruebas interrumpidas por el usuario")
    except Exception as e:
        print(f"\n‚ùå ERROR: {e}")
        import traceback

        traceback.print_exc()


if __name__ == "__main__":
    main()
