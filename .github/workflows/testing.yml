# ðŸ‡¨ðŸ‡º PACKFY CUBA - CI/CD Testing Pipeline v4.0

name: Testing Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"
  POSTGRES_VERSION: "16"
  REDIS_VERSION: "7"

jobs:
  # 1. TESTS BACKEND (Python/Django)
  backend-tests:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_packfy
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install dependencies
        run: |
          cd backend
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-django pytest-cov pytest-xdist

      - name: Run linting
        run: |
          cd backend
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run security checks
        run: |
          cd backend
          pip install bandit safety
          bandit -r . -f json -o bandit-report.json || true
          safety check --json --output safety-report.json || true

      - name: Run backend tests
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_packfy
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key-for-ci
          DEBUG: False
          DJANGO_SETTINGS_MODULE: config.settings_testing
        run: |
          cd backend
          python manage.py collectstatic --noinput
          pytest --cov=. --cov-report=xml --cov-report=html --cov-config=.coveragerc -n auto --tb=short

      - name: Upload backend coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

  # 2. TESTS FRONTEND (React/TypeScript)
  frontend-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run linting
        run: |
          cd frontend
          npm run lint

      - name: Run type checking
        run: |
          cd frontend
          npm run type-check

      - name: Run unit tests
        run: |
          cd frontend
          npm run test:coverage

      - name: Upload frontend coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # 3. TESTS E2E (Playwright)
  e2e-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_packfy
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install backend dependencies
        run: |
          cd backend
          pip install -r requirements.txt

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Install Playwright browsers
        run: |
          cd frontend
          npx playwright install --with-deps

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Start backend server
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_packfy
          SECRET_KEY: test-secret-key-for-e2e
          DEBUG: False
          DJANGO_SETTINGS_MODULE: config.settings_testing
        run: |
          cd backend
          python manage.py migrate
          python manage.py loaddata fixtures/test_data.json
          python manage.py runserver 8000 &
          echo $! > backend.pid

      - name: Start frontend server
        run: |
          cd frontend
          npm run preview -- --port 5173 &
          echo $! > frontend.pid

      - name: Wait for servers
        run: |
          npx wait-on http://localhost:8000/health/ http://localhost:5173 --timeout 60000

      - name: Run E2E tests
        env:
          E2E_BASE_URL: http://localhost:5173
        run: |
          cd frontend
          npx playwright test

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-results
          path: frontend/e2e-results/

      - name: Stop servers
        if: always()
        run: |
          if [ -f backend.pid ]; then kill $(cat backend.pid) || true; fi
          if [ -f frontend.pid ]; then kill $(cat frontend.pid) || true; fi

  # 4. TESTS DE SECURITY
  security-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: "trivy-results.sarif"

      - name: Run OWASP ZAP security scan
        uses: zaproxy/action-full-scan@v0.8.0
        with:
          target: "http://localhost:5173"
          fail_action: false
          cmd_options: "-a"

  # 5. PERFORMANCE TESTS
  performance-tests:
    runs-on: ubuntu-latest
    needs: [e2e-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Run Lighthouse CI
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun

      - name: Run load tests with Artillery
        run: |
          npm install -g artillery
          artillery run performance/load-test.yml

  # 6. REPORTS CONSOLIDATION
  test-reports:
    runs-on: ubuntu-latest
    needs:
      [
        backend-tests,
        frontend-tests,
        e2e-tests,
        security-tests,
        performance-tests,
      ]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v3

      - name: Generate test summary
        run: |
          echo "# ðŸ‡¨ðŸ‡º PACKFY CUBA - Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "## Backend Tests: ${{ needs.backend-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "## Frontend Tests: ${{ needs.frontend-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "## E2E Tests: ${{ needs.e2e-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "## Security Tests: ${{ needs.security-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "## Performance Tests: ${{ needs.performance-tests.result }}" >> $GITHUB_STEP_SUMMARY

      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('Test Results Summary')
            );

            const body = `## ðŸ§ª Test Results Summary
            - Backend Tests: ${{ needs.backend-tests.result }}
            - Frontend Tests: ${{ needs.frontend-tests.result }}
            - E2E Tests: ${{ needs.e2e-tests.result }}
            - Security Tests: ${{ needs.security-tests.result }}
            - Performance Tests: ${{ needs.performance-tests.result }}

            ðŸ“Š [View detailed results](${context.payload.pull_request.html_url}/checks)`;

            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }
